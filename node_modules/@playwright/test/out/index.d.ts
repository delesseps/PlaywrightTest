/**
 * Copyright Microsoft Corporation. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Browser, BrowserContext, BrowserContextOptions, Page, LaunchOptions } from 'playwright';
import * as folio from 'folio';
export * from 'folio';
export { BrowserContextOptions, LaunchOptions } from 'playwright';
export declare type BrowserName = 'chromium' | 'firefox' | 'webkit';
export declare type PlaywrightTestArgs = {
    playwright: typeof import('playwright');
    browserName: BrowserName;
    browser: Browser;
    context: BrowserContext;
    page: Page;
};
export declare type PlaywrightOptions = LaunchOptions & BrowserContextOptions & {
    screenshot?: 'off' | 'on' | 'only-on-failure';
    video?: 'off' | 'on' | 'retain-on-failure' | 'retry-with-video';
    snapshotPathSegment?: string;
};
export declare class PlaywrightEnv implements folio.Env<PlaywrightTestArgs> {
    private _playwright;
    private _browserName;
    private _options;
    private _browser;
    private _context;
    private _page;
    private _allPages;
    constructor(browserName: BrowserName, options?: PlaywrightOptions);
    beforeAll(): Promise<void>;
    beforeEach(testInfo: folio.TestInfo): Promise<{
        playwright: typeof import("playwright");
        browserName: "chromium" | "firefox" | "webkit";
        browser: Browser;
        context: BrowserContext;
        page: Page;
    }>;
    afterEach(testInfo: folio.TestInfo): Promise<void>;
    afterAll(): Promise<void>;
}
export declare class ChromiumEnv extends PlaywrightEnv {
    constructor(options?: PlaywrightOptions);
}
export declare class FirefoxEnv extends PlaywrightEnv {
    constructor(options?: PlaywrightOptions);
}
export declare class WebKitEnv extends PlaywrightEnv {
    constructor(options?: PlaywrightOptions);
}
declare type PlaywrightTestOptions = {
    contextOptions?: BrowserContextOptions;
};
export declare function newTestType<TestArgs = {}, TestOptions = {}>(): folio.TestType<TestArgs & PlaywrightTestArgs, TestOptions & PlaywrightTestOptions>;
export declare const test: folio.TestType<PlaywrightTestArgs, PlaywrightTestOptions>;
//# sourceMappingURL=index.d.ts.map