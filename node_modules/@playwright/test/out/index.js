"use strict";
/**
 * Copyright Microsoft Corporation. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.test = exports.newTestType = exports.WebKitEnv = exports.FirefoxEnv = exports.ChromiumEnv = exports.PlaywrightEnv = void 0;
const folio = __importStar(require("folio"));
const fs = __importStar(require("fs"));
const util = __importStar(require("util"));
__exportStar(require("folio"), exports);
class PlaywrightEnv {
    constructor(browserName, options = {}) {
        this._allPages = [];
        this._browserName = browserName;
        this._options = options;
    }
    async beforeAll() {
        this._playwright = require('playwright');
        this._browser = await this._playwright[this._browserName].launch({
            ...this._options,
            handleSIGINT: false,
        });
    }
    async beforeEach(testInfo) {
        const options = testInfo.testOptions;
        const recordVideo = this._options.video === 'on' || this._options.video === 'retain-on-failure' ||
            (this._options.video === 'retry-with-video' && !!testInfo.retry);
        this._context = await this._browser.newContext({
            recordVideo: recordVideo ? { dir: testInfo.outputPath('') } : undefined,
            ...this._options,
            ...options.contextOptions
        });
        this._allPages = [];
        this._context.on('page', page => this._allPages.push(page));
        this._page = await this._context.newPage();
        testInfo.snapshotPathSegment = this._options.snapshotPathSegment || (this._browserName + '-' + process.platform);
        return {
            playwright: this._playwright,
            browserName: this._browserName,
            browser: this._browser,
            context: this._context,
            page: this._page,
        };
    }
    async afterEach(testInfo) {
        const testFailed = testInfo.status !== testInfo.expectedStatus;
        if (this._context) {
            if (this._options.screenshot === 'on' || (this._options.screenshot === 'only-on-failure' && testFailed)) {
                await Promise.all(this._context.pages().map((page, index) => {
                    const screenshotPath = testInfo.outputPath(`test-${testFailed ? 'failed' : 'finished'}-${++index}.png`);
                    return page.screenshot({ timeout: 5000, path: screenshotPath }).catch(e => { });
                }));
            }
            await this._context.close();
        }
        const deleteVideos = this._options.video === 'retain-on-failure' && !testFailed;
        if (deleteVideos) {
            await Promise.all(this._allPages.map(async (page) => {
                const video = page.video();
                if (!video)
                    return;
                const videoPath = await video.path();
                await util.promisify(fs.unlink)(videoPath).catch(e => { });
            }));
        }
        this._allPages = [];
        this._context = undefined;
        this._page = undefined;
    }
    async afterAll() {
        if (this._browser)
            await this._browser.close();
        this._browser = undefined;
    }
}
exports.PlaywrightEnv = PlaywrightEnv;
// Environment that runs tests in Chromium.
class ChromiumEnv extends PlaywrightEnv {
    constructor(options = {}) {
        super('chromium', options);
    }
}
exports.ChromiumEnv = ChromiumEnv;
// Environment that runs tests in Firefox.
class FirefoxEnv extends PlaywrightEnv {
    constructor(options = {}) {
        super('firefox', options);
    }
}
exports.FirefoxEnv = FirefoxEnv;
// Environment that runs tests in WebKit.
class WebKitEnv extends PlaywrightEnv {
    constructor(options = {}) {
        super('webkit', options);
    }
}
exports.WebKitEnv = WebKitEnv;
function newTestType() {
    return folio.newTestType();
}
exports.newTestType = newTestType;
exports.test = newTestType();
//# sourceMappingURL=index.js.map