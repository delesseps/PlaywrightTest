/**
 * Copyright Microsoft Corporation. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { RunListDescription } from './spec';
import * as types from './types';
declare class Base {
    title: string;
    file: string;
    line: number;
    column: number;
    parent?: Suite;
    _only: boolean;
    _ordinal: number;
    constructor(title: string, parent?: Suite);
    titlePath(): string[];
    fullTitle(): string;
}
export declare class Spec extends Base implements types.Spec {
    fn: Function;
    tests: Test[];
    testOptions: any;
    constructor(title: string, fn: Function, suite: Suite);
    ok(): boolean;
    _appendTest(runList: RunListDescription, repeatEachIndex: number, retries: number): Test;
}
export declare class Suite extends Base implements types.Suite {
    suites: Suite[];
    specs: Spec[];
    _entries: (Suite | Spec)[];
    _hooks: {
        type: string;
        fn: Function;
    }[];
    _annotations: {
        type: 'skip' | 'fixme' | 'fail';
        description?: string;
    }[];
    constructor(title: string, parent?: Suite);
    _clear(): void;
    _addSpec(spec: Spec): void;
    _addSuite(suite: Suite): void;
    findTest(fn: (test: Test) => boolean | void): boolean;
    findSpec(fn: (spec: Spec) => boolean | void): boolean;
    findSuite(fn: (suite: Suite) => boolean | void): boolean;
    totalTestCount(): number;
    _allSpecs(): Spec[];
    _renumber(): void;
    _hasOnly(): boolean;
    _addHook(type: string, fn: any): void;
}
export declare class Test implements types.Test {
    spec: Spec;
    results: types.TestResult[];
    skipped: boolean;
    expectedStatus: types.TestStatus;
    timeout: number;
    annotations: {
        type: string;
        description?: string;
    }[];
    tags: string[];
    retries: number;
    _id: string;
    _workerHash: string;
    _repeatEachIndex: number;
    _runList: RunListDescription;
    constructor(spec: Spec);
    status(): 'skipped' | 'expected' | 'unexpected' | 'flaky';
    ok(): boolean;
    _appendTestResult(): types.TestResult;
}
export {};
//# sourceMappingURL=test.d.ts.map